#!/usr/bin/env ruby

# frozen_string_literal: true

require "bundler/inline"
require "erb"
require "psych"

gemfile do
  source "https://rubygems.org"
  gem "szczupac", ">= 0.4.0"
end

class CI
  RUBY_VERSIONS = [
    MRI_RUBY = [
      RUBY_3_2 = "ruby-3.2",
      RUBY_3_1 = "ruby-3.1",
      RUBY_3_0 = "ruby-3.0",
    ],
    TRUFFLE_RUBY = "truffleruby"
  ].flatten

  DATA_TYPES = [
    DATA_TEXT = "text",
    DATA_BINARY = "binary",
    DATA_JSON = "json",
    DATA_JSONB = "jsonb"
  ]

  DATA_TYPES_IN_AR = [DATA_BINARY, DATA_TYPES.drop(2)].flatten
  DATA_TYPES_IN_SEQUEL = [DATA_TEXT, DATA_TYPES.drop(2)].flatten

  DATABASE_URLS = [
    SQLITE = "sqlite:db.sqlite3",
    SQLITE3 = "sqlite3:db.sqlite3",
    POSTGRES = [
      POSTGRES_12 =
        "postgres://postgres:secret@localhost:10012/rails_event_store?pool=5",
      POSTGRES_11 =
        "postgres://postgres:secret@localhost:10011/rails_event_store?pool=5"
    ],
    MYSQL = [
      MYSQL_8 = "mysql2://root:secret@127.0.0.1:10008/rails_event_store?pool=5",
      MYSQL_5 = "mysql2://root:secret@127.0.0.1:10005/rails_event_store?pool=5"
    ]
  ].flatten

  GEMFILE = "Gemfile"

  RAILS_GEMFILES = [
    GEMFILE_RAILS_6_1 = "Gemfile.rails_6_1",
    GEMFILE_RAILS_6_0 = "Gemfile.rails_6_0"
  ].flatten

  AS_GEMFILES = [
    GEMFILE_AS_6_1 = "Gemfile.activesupport_6_1",
    GEMFILE_AS_6_0 = "Gemfile.activesupport_6_0"
  ]

  SIDEKIQ_GEMFILES = [
    GEMFILE_SIDEKIQ_6_5 = "Gemfile.sidekiq_6_5",
    GEMFILE_SIDEKIQ_5_2 = "Gemfile.sidekiq_5_2"
  ]

  def workflows
    [
      {
        name: "aggregate_root",
        working_directory: "aggregate_root",
        matrix: generate(ruby_version(RUBY_VERSIONS), bundle_gemfile(GEMFILE)),
        template: "ruby.yaml.erb"
      },
      {
        name: "aggregate_root_coverage",
        working_directory: "aggregate_root",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store",
        working_directory: "ruby_event_store",
        matrix: generate(ruby_version(RUBY_VERSIONS), bundle_gemfile(GEMFILE)),
        template: "ruby.yaml.erb"
      },
      {
        name: "ruby_event_store_coverage",
        working_directory: "ruby_event_store",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-rspec",
        working_directory: "ruby_event_store-rspec",
        matrix: generate(ruby_version(RUBY_VERSIONS), bundle_gemfile(GEMFILE)),
        template: "ruby.yaml.erb"
      },
      {
        name: "ruby_event_store-rspec_coverage",
        working_directory: "ruby_event_store-rspec",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-browser",
        working_directory: "ruby_event_store-browser",
        matrix:
          generate(
            ruby_version(RUBY_VERSIONS),
            bundle_gemfile(GEMFILE, "Gemfile.rack_2_0")
          ),
        template: "elm.yaml.erb"
      },
      {
        name: "ruby_event_store-browser_coverage",
        working_directory: "ruby_event_store-browser",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "rails_event_store",
        working_directory: "rails_event_store",
        matrix:
          generate(
            ruby_version(RUBY_VERSIONS),
            bundle_gemfile(GEMFILE, RAILS_GEMFILES)
          ),
        template: "ruby.yaml.erb"
      },
      {
        name: "rails_event_store_coverage",
        working_directory: "rails_event_store",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-active_record",
        working_directory: "ruby_event_store-active_record",
        matrix:
          generate(
            ruby_version(RUBY_VERSIONS),
            bundle_gemfile(GEMFILE),
            join(
              generate(
                database_url(SQLITE3),
                data_type(DATA_TYPES_IN_AR.take(1))
              ),
              generate(database_url(POSTGRES), data_type(DATA_TYPES_IN_AR)),
              generate(database_url(MYSQL), data_type(DATA_TYPES_IN_AR.take(2)))
            )
          ),
        template: "db.yaml.erb"
      },
      {
        name: "ruby_event_store-active_record_coverage",
        working_directory: "ruby_event_store-active_record",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-flipper",
        working_directory: "contrib/ruby_event_store-flipper",
        matrix:
          generate(
            ruby_version(MRI_RUBY),
            bundle_gemfile(GEMFILE, AS_GEMFILES)
          ),
        template: "contrib.yaml.erb"
      },
      {
        name: "ruby_event_store-flipper_coverage",
        working_directory: "contrib/ruby_event_store-flipper",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-newrelic",
        working_directory: "contrib/ruby_event_store-newrelic",
        matrix: generate(ruby_version(MRI_RUBY), bundle_gemfile(GEMFILE)),
        template: "contrib.yaml.erb"
      },
      {
        name: "ruby_event_store-newrelic_coverage",
        working_directory: "contrib/ruby_event_store-newrelic",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-outbox",
        working_directory: "contrib/ruby_event_store-outbox",
        matrix:
          join(
            generate(
              ruby_version(MRI_RUBY),
              bundle_gemfile(GEMFILE, GEMFILE_RAILS_6_1, GEMFILE_SIDEKIQ_5_2),
              database_url(SQLITE3, MYSQL_5, MYSQL_8)
            ),
            generate(
              ruby_version(RUBY_3_0),
              bundle_gemfile(GEMFILE_RAILS_6_1, GEMFILE_RAILS_6_0),
              database_url(SQLITE3)
            )
          ),
        template: "outbox.yaml.erb"
      },
      {
        name: "ruby_event_store-outbox_coverage",
        working_directory: "contrib/ruby_event_store-outbox",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "outbox_coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-profiler",
        working_directory: "contrib/ruby_event_store-profiler",
        matrix: generate(ruby_version(MRI_RUBY), bundle_gemfile(GEMFILE)),
        template: "contrib.yaml.erb"
      },
      {
        name: "ruby_event_store-profiler_coverage",
        working_directory: "contrib/ruby_event_store-profiler",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-protobuf",
        working_directory: "contrib/ruby_event_store-protobuf",
        matrix:
          join(
            generate(
              ruby_version(MRI_RUBY),
              bundle_gemfile(GEMFILE),
              database_url(SQLITE3)
            ),
            generate(
              ruby_version(MRI_RUBY),
              bundle_gemfile(GEMFILE_RAILS_6_1),
              database_url(SQLITE3)
            ),
            generate(
              ruby_version(RUBY_3_0),
              bundle_gemfile(GEMFILE_RAILS_6_0),
              database_url(SQLITE3)
            )
          ),
        template: "protobuf.yaml.erb"
      },
      {
        name: "ruby_event_store-protobuf_coverage",
        working_directory: "contrib/ruby_event_store-protobuf",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-rom",
        working_directory: "contrib/ruby_event_store-rom",
        matrix:
          join(
            generate(
              ruby_version(MRI_RUBY),
              bundle_gemfile(GEMFILE),
              database_url(SQLITE),
              data_type(DATA_TYPES_IN_SEQUEL.take(1))
            ),
            generate(
              ruby_version(RUBY_3_0),
              bundle_gemfile(GEMFILE),
              database_url(POSTGRES),
              data_type(DATA_TYPES_IN_SEQUEL)
            ),
            generate(
              ruby_version(RUBY_3_0),
              bundle_gemfile(GEMFILE),
              database_url(MYSQL),
              data_type(DATA_TYPES_IN_SEQUEL.take(1))
            )
          ),
        template: "rom.yaml.erb"
      },
      {
        name: "ruby_event_store-rom_coverage",
        working_directory: "contrib/ruby_event_store-rom",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-sequel",
        working_directory: "contrib/ruby_event_store-sequel",
        matrix:
          join(
            generate(
              ruby_version(MRI_RUBY),
              bundle_gemfile(GEMFILE),
              database_url(SQLITE),
              data_type(DATA_TYPES_IN_SEQUEL.take(1))
            ),
            generate(
              ruby_version(RUBY_3_0),
              bundle_gemfile(GEMFILE),
              database_url(POSTGRES),
              data_type(DATA_TYPES_IN_SEQUEL)
            ),
            generate(
              ruby_version(RUBY_3_0),
              bundle_gemfile(GEMFILE),
              database_url(MYSQL),
              data_type(DATA_TYPES_IN_SEQUEL.take(1))
            )
          ),
        template: "rom.yaml.erb"
      },
      {
        name: "ruby_event_store-sequel_coverage",
        working_directory: "contrib/ruby_event_store-sequel",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-sidekiq_scheduler",
        working_directory: "contrib/ruby_event_store-sidekiq_scheduler",
        matrix:
          join(
            generate(
              ruby_version(MRI_RUBY),
              bundle_gemfile(GEMFILE, SIDEKIQ_GEMFILES),
              redis_url("redis://localhost:6379/0")
            ),
            generate(ruby_version(RUBY_3_0), bundle_gemfile(SIDEKIQ_GEMFILES))
          ),
        template: "scheduler.yaml.erb"
      },
      {
        name: "ruby_event_store-sidekiq_scheduler_coverage",
        working_directory: "contrib/ruby_event_store-sidekiq_scheduler",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "scheduler_coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-transformations",
        working_directory: "contrib/ruby_event_store-transformations",
        matrix: generate(ruby_version(MRI_RUBY), bundle_gemfile(GEMFILE)),
        template: "contrib.yaml.erb"
      },
      {
        name: "ruby_event_store-transformations_coverage",
        working_directory: "contrib/ruby_event_store-transformations",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "minitest-ruby_event_store",
        working_directory: "contrib/minitest-ruby_event_store",
        matrix:
          generate(ruby_version(MRI_RUBY), bundle_gemfile(GEMFILE)),
        template: "contrib.yaml.erb"
      },
      {
        name: "minitest-ruby_event_store_coverage",
        working_directory: "contrib/minitest-ruby_event_store",
        matrix:
          generate(ruby_version(MRI_RUBY.take(1)), bundle_gemfile(GEMFILE)),
        template: "coverage.yaml.erb"
      },
      {
        name: "ruby_event_store-browser_assets",
        working_directory: "ruby_event_store-browser",
        template: "assets.yaml.erb"
      },
      {
        name: "dres_client",
        working_directory: "contrib/dres_client",
        matrix:
          generate(ruby_version(MRI_RUBY), bundle_gemfile(GEMFILE)),
        template: "dres_client.yaml.erb"
      },
      {
        name: "dres_rails",
        working_directory: "contrib/dres_rails",
        matrix:
          join(
            generate(
              ruby_version(MRI_RUBY),
              bundle_gemfile(GEMFILE),
              database_url(POSTGRES_11),
              data_type(DATA_TYPES_IN_AR)
            ),
            generate(
              ruby_version(RUBY_3_1),
              bundle_gemfile(GEMFILE),
              database_url(POSTGRES_12),
              data_type(DATA_TYPES_IN_AR)
            )
          ),
        template: "dres_rails.yaml.erb"
      }
    ]
  end

  def generate(*axes)
    Szczupac.generate(*axes)
  end

  def axis(name, *items)
    Szczupac.axis(name, Array(items.flatten))
  end

  def join(*axes)
    axes.flatten.uniq
  end

  def ruby_version(*ruby_version)
    axis("ruby_version", *ruby_version)
  end

  def bundle_gemfile(*gemfile)
    axis("bundle_gemfile", *gemfile)
  end

  def database_url(*database_url)
    axis("database_url", *database_url)
  end

  def redis_url(*redis_url)
    axis("redis_url", *redis_url)
  end

  def data_type(*data_type)
    axis("data_type", *data_type)
  end

  def as_github_actions
    workflows.each do |gem|
      name = gem.fetch(:name)
      filename = "#{name}.yml"

      File.write(
        File.join(workflows_root, filename),
        ERB.new(
          File.read(File.join(template_root, gem.fetch(:template)))
        ).result_with_hash(
          name: name,
          working_directory: gem.fetch(:working_directory),
          matrix: as_formatted_yaml(gem[:matrix], indent: 10),
          env:
            as_formatted_yaml(
              { "WORKING_DIRECTORY" => gem.fetch(:working_directory) }.merge(
                matrix_env_vars(gem[:matrix])
              ),
              indent: 6
            )
        )
      )

      puts "writing #{filename}"
    end
  end

  def matrix_env_vars(matrix)
    return {} unless matrix

    matrix
      .first
      .keys
      .reduce({}) { |acc, key| acc.merge(key.upcase => "${{ matrix.#{key} }}") }
  end

  def as_formatted_yaml(content, indent:)
    Psych.dump(content).lines.drop(1).join(" " * indent).strip
  end

  def initialize(workflows_root, template_root)
    @workflows_root = workflows_root
    @template_root = template_root
  end

  attr_reader :workflows_root, :template_root
end

CI.new(
  File.join(__dir__, "../../.github/workflows/"),
  __dir__
).as_github_actions
