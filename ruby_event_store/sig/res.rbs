module RubyEventStore
  class ExpectedVersion
    POSITION_DEFAULT: untyped
    NOT_RESOLVED: untyped
    def self.any: () -> untyped
    def self.none: () -> untyped
    def self.auto: () -> untyped
    attr_reader version: untyped
    def initialize: (untyped version) -> untyped
    def any?: () -> untyped
    def auto?: () -> untyped
    def none?: () -> untyped
    def resolve_for: (untyped stream, ?untyped resolver) -> untyped
    BIG_VALUE: ::Integer
    def hash: () -> untyped
    def ==: (untyped other_expected_version) -> untyped
    alias eql? ==
  end

  class Record
    StringsRequired: untyped
    def initialize: (event_id: untyped event_id, data: untyped data, metadata: untyped metadata, event_type: untyped event_type, timestamp: untyped timestamp, valid_at: untyped valid_at) -> untyped
    attr_reader event_id: untyped
    attr_reader data: untyped
    attr_reader metadata: untyped
    attr_reader event_type: untyped
    attr_reader timestamp: untyped
    attr_reader valid_at: untyped
    BIG_VALUE: ::Integer
    def hash: () -> untyped
    def ==: (untyped other) -> untyped
    def to_h: () -> { event_id: untyped, data: untyped, metadata: untyped, :event_type => untyped, timestamp: untyped, valid_at: untyped }
    def serialize: (untyped serializer) -> untyped
    alias eql? ==
  end

  class Stream
    def initialize: (untyped name) -> untyped
    def global?: () -> untyped
    attr_reader name: untyped
    BIG_VALUE: ::Integer
    def hash: () -> untyped
    def ==: (untyped other_stream) -> untyped
    alias eql? ==
  end

  class InMemoryRepository
    def append_to_stream: (Array[Record] records, Stream stream, Integer | ExpectedVersion expected_version) -> untyped
    def link_to_stream: (Array[String] event_ids, Stream stream, ExpectedVersion expected_version) -> untyped
    def delete_stream: (untyped stream) -> untyped
    def has_event?: (untyped event_id) -> untyped
    def last_stream_event: (untyped stream) -> untyped
    def read: (untyped spec) -> untyped
    def count: (untyped spec) -> untyped
    def update_messages: (Array[Record] records) -> untyped
    def streams_of: (String event_id) -> untyped
  end
end

module RailsEventStoreActiveRecord
  class EventRepository
    def append_to_stream: (Array[RubyEventStore::Record] records, RubyEventStore::Stream stream, Integer | RubyEventStore::ExpectedVersion expected_version) -> untyped
    def link_to_stream: (Array[String] event_ids, RubyEventStore::Stream stream, RubyEventStore::ExpectedVersion expected_version) -> untyped
    def delete_stream: (untyped stream) -> untyped
    def has_event?: (untyped event_id) -> untyped
    def last_stream_event: (untyped stream) -> untyped
    def read: (untyped specification) -> untyped
    def count: (untyped specification) -> untyped
    def update_messages: (Array[RubyEventStore::Record] records) -> untyped
    def streams_of: (String event_id) -> untyped
  end
end
